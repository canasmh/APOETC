Examples
========

Let's run through an example so that you get a better understanding of the way ``APOETC`` works.

The Arctic Instrument
---------------------
Unfortunately, the only instrument that works in this program is the Arctic instrument, though we hope to change that very soon. Anyways, lets get started and see how we would calculate an exposure time with arctic given a desired signal to noise ratio.


.. code:: python

    #First import the modules
    from APOETC import *

    #You might want to import matplotlib and numpy, just in case.
    import matplotlib.pyplot as plt
    import numpy as np

    #Define the instrument you're using.
    instrument = arc.Instrument('Arctic')

    #Define the telescope. Default is 'ARC 3.5m'.
    telescope = arc.Telescope()

    #Let's say we are only interested in the V band.
    filt = instrument.filter('V')

The filter module returns the Johnson-Cousin V band filter interpolated. It also defines a new attribute called
``filter_range`` which is a tuple (min_wavelength, max_wavelength).

.. Warning::

    Python has a built-in function called filter. Avoid using that variable.

You can plot the filter profile by doing the following:

.. code:: python

    #Set xmin to be the lower limit of the filter range
    #and xmax to be the upper limit. 100 is just a random
    #number used. You can space the grid out how you please.
    #I recommend being consistent though.
    x = np.linspace(instrument.filter_range[0],instrument.filter_range[1],100)
    plt.plot(x,filt(x))
    plt.ylim(-0.05,1.05)
    plt.xlim(instrument.filter_range[0],instrument.filter_range[1])
    plt.xlabel('Wavelength (Angstroms)')
    plt.ylabel('Transmission')
    plt.title('The V band')
    plt.show()

Which should return something that looks like this:

.. figure:: _static/thevband.png
    :align: center

Notice that the default units for wavelength is Angstroms. That should be consistent through out the whole package.



If you are unsure how scipy's UnivariateSpline works you might want to take a look at their `documentation <https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.html>`_.

It might also be handy to go ahead and interpolate the efficiency by using the ``Instrument.interpolate_efficiency`` method.

.. code:: python

    #Use the Instrument.interpolate_efficiency() method.
    interpolated_efficiency = instrument.interpolate_efficiency()

    #Plot it
    new_x = np.linspace(instrument.wavelength[0],instrument.wavelength[-1],100)
    plt.plot(new_x,interpolated_efficiency(new_x))
    plt.ylim(-0.05,1.05)
    plt.xlim(instrument.wavelength[0],instrument.wavelength[-1])
    plt.xlabel('Wavelength (Angstroms)')
    plt.ylabel('Efficiency')
    plt.title('Quantum Efficiency of Arctic')
    plt.show()

The plot should look like this:

.. figure:: _static/efficiency.png
    :align: center

You can compare with the plot shown in the Arctic `manual <https://www.apo.nmsu.edu/arc35m/Instruments/ARCTIC/>`_. Notice wavelength is still in angstroms.
